<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:boot="https://cuioss.de/jsf/bootstrap"
      xmlns:dev="https://cuioss.de/jsf/dev"
      xmlns:ui="jakarta.faces.facelets">

<ui:composition template="/templates/layout_portal_core.xhtml">

    <ui:define name="title">Dynamic-Navigation Menu</ui:define>

    <ui:define name="content">
        <h1>Dynamic-Navigation Menu</h1>
        <h2>Summary</h2>
        <p>While the portal itself defines an application in its entirety, the individual modules focus on certain aspects /
            use-cases. The common ground in the UI is the first-level-menu at the top.</p>
        <p>The challenge: How to integrate a navigation entry into the navigation bar?</p>
        <h2>General Design</h2>
        <h3>Model</h3>
        <p>portal-ui-api provides structures for modeling a navigation menu entry. There are 3 different types of
            menu entries:</p>
        <ul>
            <li><code>de.cuioss.jsf.api.components.model.menu.NavigationMenuItemContainer</code></li>
            <li><code>de.cuioss.jsf.api.components.model.menu.NavigationMenuItemSingle</code></li>
            <li><code>de.cuioss.jsf.api.components.model.menu.NavigationMenuItemSeparator</code></li>
        </ul>
        <p>
            The 'single' model represents an actual navigation element. The 'container' model allows the additional of child
            elements, which can be any NavigationMenuItem. The 'separator' model represents a separator element only.
            For displaying the:
            <boot:row>
                <boot:column size="6">
                    <dev:sourceCode source="&lt;boot:navigationMenu modelItems=&quot;&quot; /&gt;"/>
                </boot:column>
            </boot:row>
            with 'model' being instances of NavigationMenuItem. In order to work, it can only be used within a bootstrap conform
            HTML / CSS structure.
        </p>
        <h3>Portal</h3>
        <p>
            The portal defines implementations for NavigationMenuItemContainer
            (<code>de.cuioss.portal.ui.api.menu.PortalNavigationMenuItemContainerImpl</code>) and NavigationMenuItemSingle
            (<code>de.cuioss.portal.ui.api.menu.PortalNavigationMenuItemSingleImpl</code>) which store the label, title and
            outcome as DTO. The structure of the menu is defined in the application configuration by providing a set of properties
            for each menu item which is referenced by its id.<br/>
            Example:
            <dev:sourceCode sourcePath="ChangePasswordMenuItem.java.sample" type="java"/>
            and the config:
            <dev:sourceCode sourcePath="ChangePasswordMenuItem.yaml.sample" type="yaml"/>
            Due to the hierachic structure a default menu item configuration can be provided in the application and
            changed in any way in the deployment during runtime.
        </p>
        <p>
            Separators do not need to be implemented as separate objects, just add entries to the config starting with
            "separator" and followed by a unique id, provide an order and a parent entry and they will be created at
            runtime.
        </p>
        <p>
            The portal defines the interface
            <code>de.cuioss.portal.ui.api.menu.NavigationMenuProvider</code>
            that acts as a producer for all NavigationMenuItems within a portal application.
        </p>
        <p>
            The default implementation in portal-ui-api
            <code>de.cuioss.portal.ui.runtime.application.menu.NavigationMenuProviderImpl</code>
            collects all instances of NavigationMenuItem annotated with
            <code>de.cuioss.portal.ui.api.menu.NavigationMenuItem</code>
            and creates the menuModel that is referenced in the template "root.xhtml".
        </p>
        <p>Building the tree:</p>
        <ul>
            <li>Collect all instances of NavigationMenuItem</li>
            <li>Extract Top Level elements: All NavigationMenuItems that comply to
                NavigationMenuFilter.isActive(NavigationMenuItem) and where NavigationMenuItem.getParentId() == null
            </li>
            <li>Extract Child elements: All NavigationMenuItems that comply to
                NavigationMenuFilter.isActive(NavigationMenuItem) and where NavigationMenuItem.getParentId() ==
                NavigationMenuItem.getId() of one of the top-level elements
            </li>
        </ul>
        <p>With this algorithm we can easily setup complex menu structures dynamically.</p>
        <p>Ordering: Specified by NavigationMenuItem.getOrder(): the number for the ordering for the concrete
            NavigationMenuItem. The lower the number the higher the element is displayed. Usual range is 1 &lt; getOrder() 50.
            The number is used implicitly by Comparable.compareTo(Object)</p>
        <dev:sourceCode description="Sample: de.cuioss.portal.ui.api.menu.items.PreferencesMenuItem"
                        sourcePath="PreferencesMenuItem.java" type="java"/>
        <dev:sourceCode description="Usage Within template (extracted from root.xhtml)" type="java"
                        sourcePath="navigationMenuIntegration.sample"/>

        <h2>Overwriting NavigationMenuProvider</h2>
        <p>Like most aspects of the portal NavigationMenuProvider can be simple replaced by using our default mechanics</p>
        <dev:sourceCode description="Reference Web-UI Portal"
                        source="@Alternative%n@Priority(PortalPriorities.PORTAL_MODULE_LEVEL)%n@SessionScoped%npublic class ReferenceMenuProvider implements NavigationMenuProvider {"
                        type="java"/>
    </ui:define>
</ui:composition>
</html>
