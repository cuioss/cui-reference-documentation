<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="jakarta.faces.html"
      xmlns:ui="jakarta.faces.facelets"
      xmlns:dev="https://cuioss.de/jsf/dev"
      xmlns:boot="https://cuioss.de/jsf/bootstrap">

<ui:composition template="/templates/layout_portal_core.xhtml">

    <ui:define name="title">Configuration, Customization</ui:define>

    <ui:define name="content">
        <h2>Design</h2>
        <p>
            The configuration system is based on the <a
            href="https://download.eclipse.org/microprofile/microprofile-config-3.1/">
            Eclipse MicroProfile Config</a>, and provides some extensions.
        </p>

        <h2>Usage</h2>
        <p>
            The configuration system can be consumed easily:
            <dev:sourceCode type="lang-java"
                            source="@Inject%n@ConfigProperty(name=&quot;some.property&quot;, defaultValue=&quot;some.value&quot;)%nprivate String someProperty;"/>
            The <code>org.eclipse.microprofile.config.inject.ConfigProperty</code> of Eclipse MicroProfile is capable
            of automatically casting in standard types, like <code>java.lang.Integer</code>,
            <code>java.lang.Double</code> or <code>boolean</code>. More complex types are provided by own
            annotations / producers like:
        </p>
        <ul>
            <li><code>de.cuioss.portal.configuration.types.ConfigAsCacheConfig</code></li>
            <li><code>de.cuioss.portal.configuration.types.ConfigAsConnectionMetadata</code></li>
            <li><code>de.cuioss.portal.configuration.types.ConfigAsFileLoader</code></li>
            <li><code>de.cuioss.portal.configuration.types.ConfigAsFileLoaderList</code></li>
            <li><code>de.cuioss.portal.configuration.types.ConfigAsFilteredMap</code></li>
            <li><code>de.cuioss.portal.configuration.types.ConfigAsList</code></li>
            <li><code>de.cuioss.portal.configuration.types.ConfigAsLocale</code></li>
            <li><code>de.cuioss.portal.configuration.types.ConfigAsLocaleList</code></li>
            <li><code>de.cuioss.portal.configuration.types.ConfigAsPath</code></li>
            <li><code>de.cuioss.portal.configuration.types.ConfigAsSet</code></li>
        </ul>

        <h2>Handling Empty or Missing Values</h2>
        <p>
            If a config key is missing or resolves to an empty string a <code>java.util.NoSuchElementException</code> is
            thrown. To circumvent that please see the following 2 options.
        </p>
        <h3>Optional</h3>
        <p>
            Use <code>java.util.Optional</code> as the injection target type.
        </p>
        <dev:sourceCode type="java"
                        source="@Inject%n@ConfigProperty(name=&quot;some.property&quot;, defaultValue=&quot;some.value&quot;)%nprivate Optional&lt;String&gt; someProperty;"/>
        <h3>ConfigPropertyNullable</h3>
        <p>
            Instead of <code>org.eclipse.microprofile.config.inject.ConfigProperty</code> use
            <code>de.cuioss.portal.configuration.ConfigPropertyNullable</code>. This variant is especially useful
            when injecting to passivation capable beans, like session scoped or any other serializable bean.
        </p>
        <dev:sourceCode type="java"
                        source="@Inject%n@ConfigPropertyNullable(name=&quot;some.property&quot;, defaultValue=&quot;some.value&quot;)%nprivate String someProperty;"/>

        <h2>Default Configuration</h2>
        <p>
            To provide module based default configuration please provide a
            <code>META-INF/microprofile-config.properties</code> file. This configuration is automatically collected
            by the MP-Config implementation (SmallRye).
        </p>
        <p>
            Sometimes it is important to provide an order between the different default configurations, as they
            mights, but shouldn't, have redundant properties. Per default a config source has an ordinal of 100. This
            can be overridden in each file by setting the property "config_ordinal" to another value - usually higher.
            The suggested range is here between 0 and 299. Higher ordinals are occupied by the config source
            <code>EnvConfigSource</code> and <code>SysPropConfigSource</code>, which serve environment
            respectivelly JVM variables that should not be "overwritten".
            The default should be 100 +
            <code>de.cuioss.portal.common.priority.PortalPriorities#PORTAL_MODULE_LEVEL</code>.
        </p>
        <p>
            Here is a list of all our default config sources:
            <ui:repeat value="#{configDocuBean.defaultConfigSources}" var="source">
                <boot:panel collapsed="true" headerValue="#{source.name}">
                    <dev:sourceCode enableClipboard="false"
                                    source="#{source.content}"
                                    type="#{source.lang}"/>
                </boot:panel>
            </ui:repeat>
        </p>

        <h2>Custom Config Sources</h2>
        <h3>YAML Config Source</h3>
        <p>
            If the config source is based on a YAML file please use the <a
            href="https://github.com/microprofile-extensions/config-ext/blob/main/README.md">Microprofile-Extensions</a>
        </p>

        <h2>Reacting on Changes</h2>
        <p>
            The previously built-in mechansim is dropped in favor of: <a
            href="https://github.com/microprofile-extensions/config-ext/blob/main/README.md">Microprofile-Extensions</a>
        </p>

        <h2>Disabling hostname-verification</h2>
        <p>
            <em>Caution:</em> This feature is solely for development and must not be used in production, because it
            disables security. It can be used for any connection derived by
            <code>de.cuioss.portal.restclient.CuiRestClientBuilder</code>
            .The configuration-key is
            <code>baseName.transport.secure.disableHostNameVerification</code>. Setting it to <code>true</code>
            will result in the HostName-verification being disabled for that connection. The portal will log at warn
            level, in order to signal this potentially harmful behavior.
        </p>

        <h2>Variable Expansion</h2>
        <p>
            The SmallRye implementation allows for placeholders in a config value like:
            <code><h:outputText value="key2=\$\{key1:default\}"/></code>. If key1 cannot be resolved a
            <code>NoSuchElementException</code> is thrown, if there is no default value.
            More information can be found in
            <a href="https://smallrye.io/docs/smallrye-config/interceptors/interceptors.html#expression-interceptor">
                the SmallRye Expression Iterceptor documentation
            </a>.
        </p>
    </ui:define>
</ui:composition>
</html>
